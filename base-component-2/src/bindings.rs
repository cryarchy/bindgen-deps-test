// Generated by `wit-bindgen` 0.25.0. DO NOT EDIT!
// Options used:
#[allow(dead_code)]
pub mod exports {
    #[allow(dead_code)]
    pub mod pkg {
        #[allow(dead_code)]
        pub mod base_pkg {
            #[allow(dead_code, clippy::all)]
            pub mod types {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                #[derive(Clone)]
                pub struct PingRequest {
                    pub component_name: _rt::String,
                    pub payload: _rt::String,
                }
                impl ::core::fmt::Debug for PingRequest {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("PingRequest")
                            .field("component-name", &self.component_name)
                            .field("payload", &self.payload)
                            .finish()
                    }
                }
                #[doc(hidden)]

                macro_rules! __export_pkg_base_pkg_types_cabi {
                    ($ty:ident with_types_in $($path_to_types:tt)*) => {
                        const _: () = {};
                    };
                }
                #[doc(hidden)]
                pub(crate) use __export_pkg_base_pkg_types_cabi;
            }

            #[allow(dead_code, clippy::all)]
            pub mod description {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() =
                    super::super::super::super::__link_custom_section_describing_imports;
                use super::super::super::super::_rt;
                pub type PingRequest =
                    super::super::super::super::exports::pkg::base_pkg::types::PingRequest;
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_ping_cabi<T: Guest>(
                    arg0: *mut u8,
                    arg1: usize,
                    arg2: *mut u8,
                    arg3: usize,
                ) -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let len0 = arg1;
                    let bytes0 = _rt::Vec::from_raw_parts(arg0.cast(), len0, len0);
                    let len1 = arg3;
                    let bytes1 = _rt::Vec::from_raw_parts(arg2.cast(), len1, len1);
                    let result2 = T::ping(
                        super::super::super::super::exports::pkg::base_pkg::types::PingRequest {
                            component_name: _rt::string_lift(bytes0),
                            payload: _rt::string_lift(bytes1),
                        },
                    );
                    let ptr3 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let vec4 = (result2.into_bytes()).into_boxed_slice();
                    let ptr4 = vec4.as_ptr().cast::<u8>();
                    let len4 = vec4.len();
                    ::core::mem::forget(vec4);
                    *ptr3.add(4).cast::<usize>() = len4;
                    *ptr3.add(0).cast::<*mut u8>() = ptr4.cast_mut();
                    ptr3
                }
                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_ping<T: Guest>(arg0: *mut u8) {
                    let l0 = *arg0.add(0).cast::<*mut u8>();
                    let l1 = *arg0.add(4).cast::<usize>();
                    _rt::cabi_dealloc(l0, l1, 1);
                }
                pub trait Guest {
                    fn ping(request: PingRequest) -> _rt::String;
                }
                #[doc(hidden)]

                macro_rules! __export_pkg_base_pkg_description_cabi{
        ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

          #[export_name = "pkg:base-pkg/description#ping"]
          unsafe extern "C" fn export_ping(arg0: *mut u8,arg1: usize,arg2: *mut u8,arg3: usize,) -> *mut u8 {
            $($path_to_types)*::_export_ping_cabi::<$ty>(arg0, arg1, arg2, arg3)
          }
          #[export_name = "cabi_post_pkg:base-pkg/description#ping"]
          unsafe extern "C" fn _post_return_ping(arg0: *mut u8,) {
            $($path_to_types)*::__post_return_ping::<$ty>(arg0)
          }
        };);
      }
                #[doc(hidden)]
                pub(crate) use __export_pkg_base_pkg_description_cabi;
                #[repr(align(4))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 8]);
                static mut _RET_AREA: _RetArea = _RetArea([::core::mem::MaybeUninit::uninit(); 8]);
            }
        }
    }
}
mod _rt {
    pub use alloc_crate::string::String;

    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }
    pub use alloc_crate::vec::Vec;
    pub unsafe fn string_lift(bytes: Vec<u8>) -> String {
        if cfg!(debug_assertions) {
            String::from_utf8(bytes).unwrap()
        } else {
            String::from_utf8_unchecked(bytes)
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr as *mut u8, layout);
    }
    extern crate alloc as alloc_crate;
    pub use alloc_crate::alloc;
}

/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_base_pkg_world_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::exports::pkg::base_pkg::types::__export_pkg_base_pkg_types_cabi!($ty with_types_in $($path_to_types_root)*::exports::pkg::base_pkg::types);
  $($path_to_types_root)*::exports::pkg::base_pkg::description::__export_pkg_base_pkg_description_cabi!($ty with_types_in $($path_to_types_root)*::exports::pkg::base_pkg::description);
  )
}
#[doc(inline)]
pub(crate) use __export_base_pkg_world_impl as export;

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.25.0:base-pkg-world:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 338] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xcd\x01\x01A\x02\x01\
A\x05\x01B\x02\x01r\x02\x0ecomponent-names\x07payloads\x04\0\x0cping-request\x03\
\0\0\x04\x01\x12pkg:base-pkg/types\x05\0\x02\x03\0\0\x0cping-request\x01B\x04\x02\
\x03\x02\x01\x01\x04\0\x0cping-request\x03\0\0\x01@\x01\x07request\x01\0s\x04\0\x04\
ping\x01\x02\x04\x01\x18pkg:base-pkg/description\x05\x02\x04\x01\x1bpkg:base-pkg\
/base-pkg-world\x04\0\x0b\x14\x01\0\x0ebase-pkg-world\x03\0\0\0G\x09producers\x01\
\x0cprocessed-by\x02\x0dwit-component\x070.208.1\x10wit-bindgen-rust\x060.25.0";

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
